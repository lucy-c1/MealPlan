import { doc, setDoc, collection, addDoc } from "firebase/firestore";
import { db } from "../firebase";
import type { Recipe } from "@/types/type";

/**
 * Adds or updates a recipe in a user's "recipes" subcollection in Firestore.
 * This can be either manually created or from the recipe API.
 *
 * - If `recipe.id` is provided, it uses it as the document ID and will overwrite any existing recipe.
 * - If `recipe.id` is not provided, it auto-generates a document ID and saves the recipe under it.
 *
 * @param userId - The unique ID of the user in the "users" collection.
 * @param recipe - The recipe object to store. If no `id` is provided, one will be auto-generated.
 *
 * Firestore Path:
 * - Manual ID: `users/{userId}/recipes/{recipe.id}`
 * - Auto ID:   `users/{userId}/recipes/{autoGeneratedId}`
 */
export async function addRecipe(userId: string, recipe: Recipe) {
  try {
    const recipeData = {
      name: recipe.name,
      area: recipe.area,
      category: recipe.category,
      ingredients: recipe.ingredients,
      instructions: recipe.instructions,
      imageUrl: recipe.imageUrl,
      tags: recipe.tags,
      youtubeUrl: recipe.youtubeUrl ?? null,
    };

    if (recipe.id) {
      const recipeRef = doc(db, "users", userId, "recipes", recipe.id);
      await setDoc(recipeRef, recipeData);
      console.log("Recipe saved with ID:", recipe.id);
    } else {
      const recipesCol = collection(db, "users", userId, "recipes");
      const docRef = await addDoc(recipesCol, recipeData);
      console.log("Recipe saved with auto-generated ID:", docRef.id);
    }
  } catch (error) {
    console.error("Failed to save recipe:", error);
  }
}

export default {
  addRecipe,
};
